// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: queue.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Queue.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - QueueRoot

@implementation QueueRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - QueueRoot_FileDescriptor

static GPBFileDescriptor *QueueRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"queue"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Empty

@implementation Empty


typedef struct Empty__storage_ {
  uint32_t _has_storage_[1];
} Empty__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Empty class]
                                     rootClass:[QueueRoot class]
                                          file:QueueRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(Empty__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueueParams

@implementation QueueParams

@dynamic previousMessagesOneOfCase;
@dynamic conversation;
@dynamic botId;
@dynamic timestamp;

typedef struct QueueParams__storage_ {
  uint32_t _has_storage_[2];
  NSString *conversation;
  NSString *botId;
  int64_t timestamp;
} QueueParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "conversation",
        .dataTypeSpecific.className = NULL,
        .number = QueueParams_FieldNumber_Conversation,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(QueueParams__storage_, conversation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "botId",
        .dataTypeSpecific.className = NULL,
        .number = QueueParams_FieldNumber_BotId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(QueueParams__storage_, botId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = QueueParams_FieldNumber_Timestamp,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(QueueParams__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QueueParams class]
                                     rootClass:[QueueRoot class]
                                          file:QueueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueueParams__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "previousMessages",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void QueueParams_ClearPreviousMessagesOneOfCase(QueueParams *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - QueueInput

@implementation QueueInput

@dynamic sessionId;

typedef struct QueueInput__storage_ {
  uint32_t _has_storage_[1];
  NSString *sessionId;
} QueueInput__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = QueueInput_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueueInput__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QueueInput class]
                                     rootClass:[QueueRoot class]
                                          file:QueueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueueInput__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Message

@implementation Message

@dynamic id_p;
@dynamic content;

typedef struct Message__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *content;
} Message__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Message__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Message__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Message class]
                                     rootClass:[QueueRoot class]
                                          file:QueueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Message__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessageList

@implementation MessageList

@dynamic messagesArray, messagesArray_Count;

typedef struct MessageList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *messagesArray;
} MessageList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Message),
        .number = MessageList_FieldNumber_MessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MessageList__storage_, messagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageList class]
                                     rootClass:[QueueRoot class]
                                          file:QueueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueueResponse

@implementation QueueResponse

@dynamic onSatellite;
@dynamic queueMsgsArray, queueMsgsArray_Count;
@dynamic previousMsgsArray, previousMsgsArray_Count;
@dynamic errorMessage;

typedef struct QueueResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *queueMsgsArray;
  NSMutableArray *previousMsgsArray;
  NSString *errorMessage;
} QueueResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "onSatellite",
        .dataTypeSpecific.className = NULL,
        .number = QueueResponse_FieldNumber_OnSatellite,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "queueMsgsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(QueueMessage),
        .number = QueueResponse_FieldNumber_QueueMsgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueueResponse__storage_, queueMsgsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "previousMsgsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PreviousMessage),
        .number = QueueResponse_FieldNumber_PreviousMsgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueueResponse__storage_, previousMsgsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.className = NULL,
        .number = QueueResponse_FieldNumber_ErrorMessage,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueueResponse__storage_, errorMessage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QueueResponse class]
                                     rootClass:[QueueRoot class]
                                          file:QueueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueueResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\013\000\002\000queueMsgs\000\003\000previousMsgs\000\004\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PreviousMessage

@implementation PreviousMessage

@dynamic messageId;
@dynamic contentType;
@dynamic createdOn;
@dynamic contentArray, contentArray_Count;

typedef struct PreviousMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t createdOn;
  NSString *messageId;
  NSString *contentType;
  NSMutableArray *contentArray;
} PreviousMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = PreviousMessage_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PreviousMessage__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentType",
        .dataTypeSpecific.className = NULL,
        .number = PreviousMessage_FieldNumber_ContentType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PreviousMessage__storage_, contentType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdOn",
        .dataTypeSpecific.className = NULL,
        .number = PreviousMessage_FieldNumber_CreatedOn,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PreviousMessage__storage_, createdOn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "contentArray",
        .dataTypeSpecific.className = NULL,
        .number = PreviousMessage_FieldNumber_ContentArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PreviousMessage__storage_, contentArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PreviousMessage class]
                                     rootClass:[QueueRoot class]
                                          file:QueueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PreviousMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\t\000\002\013\000\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueueMessage

@implementation QueueMessage

@dynamic userId;
@dynamic conversation;
@dynamic bot;
@dynamic createdOn;
@dynamic createdBy;
@dynamic contentType;
@dynamic messageId;
@dynamic requestUuid;
@dynamic detailsArray, detailsArray_Count;
@dynamic error;

typedef struct QueueMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t createdOn;
  int32_t contentType;
  NSString *userId;
  NSString *conversation;
  NSString *bot;
  NSString *createdBy;
  NSString *messageId;
  NSString *requestUuid;
  NSMutableArray *detailsArray;
  NSString *error;
} QueueMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = QueueMessage_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueueMessage__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "conversation",
        .dataTypeSpecific.className = NULL,
        .number = QueueMessage_FieldNumber_Conversation,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueueMessage__storage_, conversation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bot",
        .dataTypeSpecific.className = NULL,
        .number = QueueMessage_FieldNumber_Bot,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueueMessage__storage_, bot),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdOn",
        .dataTypeSpecific.className = NULL,
        .number = QueueMessage_FieldNumber_CreatedOn,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(QueueMessage__storage_, createdOn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "createdBy",
        .dataTypeSpecific.className = NULL,
        .number = QueueMessage_FieldNumber_CreatedBy,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(QueueMessage__storage_, createdBy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentType",
        .dataTypeSpecific.className = NULL,
        .number = QueueMessage_FieldNumber_ContentType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(QueueMessage__storage_, contentType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = QueueMessage_FieldNumber_MessageId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(QueueMessage__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestUuid",
        .dataTypeSpecific.className = NULL,
        .number = QueueMessage_FieldNumber_RequestUuid,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(QueueMessage__storage_, requestUuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "detailsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MessageDetails),
        .number = QueueMessage_FieldNumber_DetailsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueueMessage__storage_, detailsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "error",
        .dataTypeSpecific.className = NULL,
        .number = QueueMessage_FieldNumber_Error,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(QueueMessage__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QueueMessage class]
                                     rootClass:[QueueRoot class]
                                          file:QueueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueueMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\006\000\004\t\000\005\t\000\006\013\000\007\t\000\010\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MapFieldEntry

@implementation MapFieldEntry

@dynamic key;
@dynamic value;

typedef struct MapFieldEntry__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
  NSString *value;
} MapFieldEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = MapFieldEntry_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MapFieldEntry__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = MapFieldEntry_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MapFieldEntry__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MapFieldEntry class]
                                     rootClass:[QueueRoot class]
                                          file:QueueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MapFieldEntry__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessageDetails

@implementation MessageDetails

@dynamic message;
@dynamic error;
@dynamic infoArray, infoArray_Count;

typedef struct MessageDetails__storage_ {
  uint32_t _has_storage_[1];
  NSString *message;
  NSString *error;
  NSMutableArray *infoArray;
} MessageDetails__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = MessageDetails_FieldNumber_Message,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessageDetails__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "error",
        .dataTypeSpecific.className = NULL,
        .number = MessageDetails_FieldNumber_Error,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessageDetails__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "infoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MapFieldEntry),
        .number = MessageDetails_FieldNumber_InfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MessageDetails__storage_, infoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageDetails class]
                                     rootClass:[QueueRoot class]
                                          file:QueueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageDetails__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
