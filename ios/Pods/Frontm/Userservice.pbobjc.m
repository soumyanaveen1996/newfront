// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userservice.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Userservice.pbobjc.h"
#import "Commonmessages.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - UserserviceRoot

@implementation UserserviceRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - UserserviceRoot_FileDescriptor

static GPBFileDescriptor *UserserviceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"user"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - User

@implementation User

@dynamic userName;
@dynamic emailAddress;
@dynamic hasPhoneNumbers, phoneNumbers;
@dynamic searchable;
@dynamic visible;
@dynamic userId;
@dynamic companyId;
@dynamic userCompanyName;
@dynamic hasAddress, address;
@dynamic userTimezone;

typedef struct User__storage_ {
  uint32_t _has_storage_[1];
  NSString *userName;
  NSString *emailAddress;
  PhoneNumbers *phoneNumbers;
  NSString *userId;
  NSString *companyId;
  NSString *userCompanyName;
  UserAddress *address;
  NSString *userTimezone;
} User__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(User__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "emailAddress",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_EmailAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(User__storage_, emailAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phoneNumbers",
        .dataTypeSpecific.className = GPBStringifySymbol(PhoneNumbers),
        .number = User_FieldNumber_PhoneNumbers,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(User__storage_, phoneNumbers),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "searchable",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Searchable,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "visible",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Visible,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_UserId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(User__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "companyId",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_CompanyId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(User__storage_, companyId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userCompanyName",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_UserCompanyName,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(User__storage_, userCompanyName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(UserAddress),
        .number = User_FieldNumber_Address,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(User__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userTimezone",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_UserTimezone,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(User__storage_, userTimezone),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[User class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(User__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\010\000\002\014\000\003\014\000\006\006\000\007\t\000\010\017\000\n\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateUserProfileResponse

@implementation UpdateUserProfileResponse

@dynamic error;
@dynamic contentArray, contentArray_Count;

typedef struct UpdateUserProfileResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t error;
  GPBBoolArray *contentArray;
} UpdateUserProfileResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = NULL,
        .number = UpdateUserProfileResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUserProfileResponse__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "contentArray",
        .dataTypeSpecific.className = NULL,
        .number = UpdateUserProfileResponse_FieldNumber_ContentArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UpdateUserProfileResponse__storage_, contentArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUserProfileResponse class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUserProfileResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BotSubscriptionsResponse

@implementation BotSubscriptionsResponse

@dynamic error;
@dynamic hasContent, content;

typedef struct BotSubscriptionsResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t error;
  SubscribedBotsContent *content;
} BotSubscriptionsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = NULL,
        .number = BotSubscriptionsResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BotSubscriptionsResponse__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = GPBStringifySymbol(SubscribedBotsContent),
        .number = BotSubscriptionsResponse_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BotSubscriptionsResponse__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BotSubscriptionsResponse class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BotSubscriptionsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubscribedBotsContent

@implementation SubscribedBotsContent

@dynamic subscribedArray, subscribedArray_Count;
@dynamic favouritesArray, favouritesArray_Count;

typedef struct SubscribedBotsContent__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *subscribedArray;
  NSMutableArray *favouritesArray;
} SubscribedBotsContent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subscribedArray",
        .dataTypeSpecific.className = NULL,
        .number = SubscribedBotsContent_FieldNumber_SubscribedArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SubscribedBotsContent__storage_, subscribedArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "favouritesArray",
        .dataTypeSpecific.className = NULL,
        .number = SubscribedBotsContent_FieldNumber_FavouritesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SubscribedBotsContent__storage_, favouritesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubscribedBotsContent class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubscribedBotsContent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ContactsResponse

@implementation ContactsResponse

@dynamic contactsArray, contactsArray_Count;
@dynamic ignoredArray, ignoredArray_Count;
@dynamic localContactsArray, localContactsArray_Count;
@dynamic sites;

typedef struct ContactsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *contactsArray;
  NSMutableArray *ignoredArray;
  NSMutableArray *localContactsArray;
  NSString *sites;
} ContactsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contactsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Contact),
        .number = ContactsResponse_FieldNumber_ContactsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ContactsResponse__storage_, contactsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ignoredArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Contact),
        .number = ContactsResponse_FieldNumber_IgnoredArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ContactsResponse__storage_, ignoredArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "localContactsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(LocalContact),
        .number = ContactsResponse_FieldNumber_LocalContactsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ContactsResponse__storage_, localContactsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sites",
        .dataTypeSpecific.className = NULL,
        .number = ContactsResponse_FieldNumber_Sites,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ContactsResponse__storage_, sites),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ContactsResponse class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ContactsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\000localContacts\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Contact

@implementation Contact

@dynamic userName;
@dynamic emailAddress;
@dynamic hasPhoneNumbers, phoneNumbers;
@dynamic userId;
@dynamic waitingForConfirmation;
@dynamic userCompanyName;
@dynamic hasAddress, address;
@dynamic showAcceptIgnoreMsg;

typedef struct Contact__storage_ {
  uint32_t _has_storage_[1];
  NSString *userName;
  NSString *emailAddress;
  PhoneNumbers *phoneNumbers;
  NSString *userId;
  NSString *userCompanyName;
  UserAddress *address;
} Contact__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = Contact_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Contact__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "emailAddress",
        .dataTypeSpecific.className = NULL,
        .number = Contact_FieldNumber_EmailAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Contact__storage_, emailAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phoneNumbers",
        .dataTypeSpecific.className = GPBStringifySymbol(PhoneNumbers),
        .number = Contact_FieldNumber_PhoneNumbers,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Contact__storage_, phoneNumbers),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = Contact_FieldNumber_UserId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Contact__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "waitingForConfirmation",
        .dataTypeSpecific.className = NULL,
        .number = Contact_FieldNumber_WaitingForConfirmation,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "userCompanyName",
        .dataTypeSpecific.className = NULL,
        .number = Contact_FieldNumber_UserCompanyName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Contact__storage_, userCompanyName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(UserAddress),
        .number = Contact_FieldNumber_Address,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Contact__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "showAcceptIgnoreMsg",
        .dataTypeSpecific.className = NULL,
        .number = Contact_FieldNumber_ShowAcceptIgnoreMsg,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Contact class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Contact__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\010\000\002\014\000\003\014\000\004\006\000\005\026\000\006\017\000\010\023\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubscribeBotInput

@implementation SubscribeBotInput

@dynamic botId;

typedef struct SubscribeBotInput__storage_ {
  uint32_t _has_storage_[1];
  NSString *botId;
} SubscribeBotInput__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "botId",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeBotInput_FieldNumber_BotId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubscribeBotInput__storage_, botId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubscribeBotInput class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubscribeBotInput__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubscribeBotResponse

@implementation SubscribeBotResponse

@dynamic error;
@dynamic contentArray, contentArray_Count;

typedef struct SubscribeBotResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t error;
  GPBBoolArray *contentArray;
} SubscribeBotResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeBotResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubscribeBotResponse__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "contentArray",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeBotResponse_FieldNumber_ContentArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SubscribeBotResponse__storage_, contentArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubscribeBotResponse class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubscribeBotResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubscribeDomainInput

@implementation SubscribeDomainInput

@dynamic verificationCode;

typedef struct SubscribeDomainInput__storage_ {
  uint32_t _has_storage_[1];
  NSString *verificationCode;
} SubscribeDomainInput__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "verificationCode",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeDomainInput_FieldNumber_VerificationCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubscribeDomainInput__storage_, verificationCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubscribeDomainInput class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubscribeDomainInput__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\020\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubscribeDomainResponse

@implementation SubscribeDomainResponse

@dynamic contentArray, contentArray_Count;
@dynamic error;
@dynamic errorMessage;

typedef struct SubscribeDomainResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t error;
  NSMutableArray *contentArray;
  NSString *errorMessage;
} SubscribeDomainResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contentArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserDomain),
        .number = SubscribeDomainResponse_FieldNumber_ContentArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SubscribeDomainResponse__storage_, contentArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "error",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeDomainResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubscribeDomainResponse__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeDomainResponse_FieldNumber_ErrorMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SubscribeDomainResponse__storage_, errorMessage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubscribeDomainResponse class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubscribeDomainResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipToggleResponse

@implementation VoipToggleResponse

@dynamic success;

typedef struct VoipToggleResponse__storage_ {
  uint32_t _has_storage_[1];
} VoipToggleResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .dataTypeSpecific.className = NULL,
        .number = VoipToggleResponse_FieldNumber_Success,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipToggleResponse class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipToggleResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipStatusInput

@implementation VoipStatusInput

@dynamic userId;

typedef struct VoipStatusInput__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} VoipStatusInput__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = VoipStatusInput_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoipStatusInput__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipStatusInput class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipStatusInput__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoipStatusResponse

@implementation VoipStatusResponse

@dynamic voipEnabled;
@dynamic error;

typedef struct VoipStatusResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t error;
} VoipStatusResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voipEnabled",
        .dataTypeSpecific.className = NULL,
        .number = VoipStatusResponse_FieldNumber_VoipEnabled,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "error",
        .dataTypeSpecific.className = NULL,
        .number = VoipStatusResponse_FieldNumber_Error,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VoipStatusResponse__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoipStatusResponse class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoipStatusResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TwilioTokenInput

@implementation TwilioTokenInput

@dynamic platform;
@dynamic env;

typedef struct TwilioTokenInput__storage_ {
  uint32_t _has_storage_[1];
  NSString *platform;
  NSString *env;
} TwilioTokenInput__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "platform",
        .dataTypeSpecific.className = NULL,
        .number = TwilioTokenInput_FieldNumber_Platform,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TwilioTokenInput__storage_, platform),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "env",
        .dataTypeSpecific.className = NULL,
        .number = TwilioTokenInput_FieldNumber_Env,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TwilioTokenInput__storage_, env),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TwilioTokenInput class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TwilioTokenInput__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TwilioTokenResponse

@implementation TwilioTokenResponse

@dynamic accessToken;

typedef struct TwilioTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *accessToken;
} TwilioTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accessToken",
        .dataTypeSpecific.className = NULL,
        .number = TwilioTokenResponse_FieldNumber_AccessToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TwilioTokenResponse__storage_, accessToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TwilioTokenResponse class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TwilioTokenResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ManageTncInput

@implementation ManageTncInput

@dynamic action;

typedef struct ManageTncInput__storage_ {
  uint32_t _has_storage_[1];
  NSString *action;
} ManageTncInput__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "action",
        .dataTypeSpecific.className = NULL,
        .number = ManageTncInput_FieldNumber_Action,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ManageTncInput__storage_, action),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ManageTncInput class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ManageTncInput__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ManageTncResponse

@implementation ManageTncResponse

@dynamic error;
@dynamic contentArray, contentArray_Count;

typedef struct ManageTncResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t error;
  NSMutableArray *contentArray;
} ManageTncResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = NULL,
        .number = ManageTncResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ManageTncResponse__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "contentArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ManageTncObject),
        .number = ManageTncResponse_FieldNumber_ContentArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ManageTncResponse__storage_, contentArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ManageTncResponse class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ManageTncResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ManageTncObject

@implementation ManageTncObject

@dynamic tncAccept;

typedef struct ManageTncObject__storage_ {
  uint32_t _has_storage_[1];
} ManageTncObject__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tncAccept",
        .dataTypeSpecific.className = NULL,
        .number = ManageTncObject_FieldNumber_TncAccept,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ManageTncObject class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ManageTncObject__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CompaniesResponse

@implementation CompaniesResponse

@dynamic companiesArray, companiesArray_Count;

typedef struct CompaniesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *companiesArray;
} CompaniesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "companiesArray",
        .dataTypeSpecific.className = NULL,
        .number = CompaniesResponse_FieldNumber_CompaniesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CompaniesResponse__storage_, companiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CompaniesResponse class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CompaniesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PaginatedCallHistoryInput

@implementation PaginatedCallHistoryInput

@dynamic startTime;

typedef struct PaginatedCallHistoryInput__storage_ {
  uint32_t _has_storage_[1];
  double startTime;
} PaginatedCallHistoryInput__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PaginatedCallHistoryInput_FieldNumber_StartTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PaginatedCallHistoryInput__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PaginatedCallHistoryInput class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PaginatedCallHistoryInput__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PaginatedCallHistoryResponse

@implementation PaginatedCallHistoryResponse

@dynamic error;
@dynamic recordsArray, recordsArray_Count;
@dynamic moreRecordsExist;

typedef struct PaginatedCallHistoryResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t error;
  NSMutableArray *recordsArray;
} PaginatedCallHistoryResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = NULL,
        .number = PaginatedCallHistoryResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PaginatedCallHistoryResponse__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "recordsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CallHistoryObject),
        .number = PaginatedCallHistoryResponse_FieldNumber_RecordsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PaginatedCallHistoryResponse__storage_, recordsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "moreRecordsExist",
        .dataTypeSpecific.className = NULL,
        .number = PaginatedCallHistoryResponse_FieldNumber_MoreRecordsExist,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PaginatedCallHistoryResponse class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PaginatedCallHistoryResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\020\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CallHistoryResponse

@implementation CallHistoryResponse

@dynamic contentArray, contentArray_Count;

typedef struct CallHistoryResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *contentArray;
} CallHistoryResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contentArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CallHistoryObject),
        .number = CallHistoryResponse_FieldNumber_ContentArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CallHistoryResponse__storage_, contentArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CallHistoryResponse class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CallHistoryResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CallHistoryObject

@implementation CallHistoryObject

@dynamic callCharge;
@dynamic callTimestamp;
@dynamic currentBalance;
@dynamic duration;
@dynamic userId;
@dynamic callType;
@dynamic callDirection;
@dynamic fromUserId;
@dynamic fromUserName;
@dynamic toNumber;
@dynamic toUserId;
@dynamic toUserName;

typedef struct CallHistoryObject__storage_ {
  uint32_t _has_storage_[1];
  float currentBalance;
  int32_t duration;
  NSString *userId;
  NSString *callType;
  NSString *callDirection;
  NSString *fromUserId;
  NSString *fromUserName;
  NSString *toNumber;
  NSString *toUserId;
  NSString *toUserName;
  double callCharge;
  int64_t callTimestamp;
} CallHistoryObject__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "callCharge",
        .dataTypeSpecific.className = NULL,
        .number = CallHistoryObject_FieldNumber_CallCharge,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CallHistoryObject__storage_, callCharge),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "callTimestamp",
        .dataTypeSpecific.className = NULL,
        .number = CallHistoryObject_FieldNumber_CallTimestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CallHistoryObject__storage_, callTimestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "currentBalance",
        .dataTypeSpecific.className = NULL,
        .number = CallHistoryObject_FieldNumber_CurrentBalance,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CallHistoryObject__storage_, currentBalance),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "duration",
        .dataTypeSpecific.className = NULL,
        .number = CallHistoryObject_FieldNumber_Duration,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CallHistoryObject__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = CallHistoryObject_FieldNumber_UserId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CallHistoryObject__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "callType",
        .dataTypeSpecific.className = NULL,
        .number = CallHistoryObject_FieldNumber_CallType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CallHistoryObject__storage_, callType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "callDirection",
        .dataTypeSpecific.className = NULL,
        .number = CallHistoryObject_FieldNumber_CallDirection,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(CallHistoryObject__storage_, callDirection),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromUserId",
        .dataTypeSpecific.className = NULL,
        .number = CallHistoryObject_FieldNumber_FromUserId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(CallHistoryObject__storage_, fromUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromUserName",
        .dataTypeSpecific.className = NULL,
        .number = CallHistoryObject_FieldNumber_FromUserName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(CallHistoryObject__storage_, fromUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toNumber",
        .dataTypeSpecific.className = NULL,
        .number = CallHistoryObject_FieldNumber_ToNumber,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(CallHistoryObject__storage_, toNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toUserId",
        .dataTypeSpecific.className = NULL,
        .number = CallHistoryObject_FieldNumber_ToUserId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(CallHistoryObject__storage_, toUserId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toUserName",
        .dataTypeSpecific.className = NULL,
        .number = CallHistoryObject_FieldNumber_ToUserName,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(CallHistoryObject__storage_, toUserName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CallHistoryObject class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CallHistoryObject__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\001\n\000\002\r\000\003\016\000\005\006\000\006\010\000\007\r\000\010\n\000\t\014\000\n\010\000\013\010\000\014\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserDomainsResponse

@implementation UserDomainsResponse

@dynamic domainsArray, domainsArray_Count;

typedef struct UserDomainsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *domainsArray;
} UserDomainsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "domainsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserDomain),
        .number = UserDomainsResponse_FieldNumber_DomainsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserDomainsResponse__storage_, domainsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserDomainsResponse class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserDomainsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserDomain

@implementation UserDomain

@dynamic userDomain;
@dynamic name;
@dynamic hasViewModes, viewModes;
@dynamic logoURL;
@dynamic lastLoggedIn;
@dynamic lockInUsers;

typedef struct UserDomain__storage_ {
  uint32_t _has_storage_[1];
  NSString *userDomain;
  NSString *name;
  DomainViewMode *viewModes;
  NSString *logoURL;
} UserDomain__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userDomain",
        .dataTypeSpecific.className = NULL,
        .number = UserDomain_FieldNumber_UserDomain,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserDomain__storage_, userDomain),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = UserDomain_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserDomain__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "viewModes",
        .dataTypeSpecific.className = GPBStringifySymbol(DomainViewMode),
        .number = UserDomain_FieldNumber_ViewModes,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserDomain__storage_, viewModes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "logoURL",
        .dataTypeSpecific.className = NULL,
        .number = UserDomain_FieldNumber_LogoURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UserDomain__storage_, logoURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastLoggedIn",
        .dataTypeSpecific.className = NULL,
        .number = UserDomain_FieldNumber_LastLoggedIn,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "lockInUsers",
        .dataTypeSpecific.className = NULL,
        .number = UserDomain_FieldNumber_LockInUsers,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserDomain class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserDomain__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\n\000\003\t\000\004\005!!\000\005\014\000\006\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DomainViewMode

@implementation DomainViewMode

@dynamic apps;
@dynamic channels;
@dynamic chat;
@dynamic voip;

typedef struct DomainViewMode__storage_ {
  uint32_t _has_storage_[1];
} DomainViewMode__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "apps",
        .dataTypeSpecific.className = NULL,
        .number = DomainViewMode_FieldNumber_Apps,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "channels",
        .dataTypeSpecific.className = NULL,
        .number = DomainViewMode_FieldNumber_Channels,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "chat",
        .dataTypeSpecific.className = NULL,
        .number = DomainViewMode_FieldNumber_Chat,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "voip",
        .dataTypeSpecific.className = NULL,
        .number = DomainViewMode_FieldNumber_Voip,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DomainViewMode class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DomainViewMode__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CallHistoryInput

@implementation CallHistoryInput

@dynamic contactId;

typedef struct CallHistoryInput__storage_ {
  uint32_t _has_storage_[1];
  NSString *contactId;
} CallHistoryInput__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contactId",
        .dataTypeSpecific.className = NULL,
        .number = CallHistoryInput_FieldNumber_ContactId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CallHistoryInput__storage_, contactId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CallHistoryInput class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CallHistoryInput__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LastLoggedInDomainInput

@implementation LastLoggedInDomainInput

@dynamic userDomain;

typedef struct LastLoggedInDomainInput__storage_ {
  uint32_t _has_storage_[1];
  NSString *userDomain;
} LastLoggedInDomainInput__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userDomain",
        .dataTypeSpecific.className = NULL,
        .number = LastLoggedInDomainInput_FieldNumber_UserDomain,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LastLoggedInDomainInput__storage_, userDomain),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LastLoggedInDomainInput class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LastLoggedInDomainInput__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TopupBalanceInput

@implementation TopupBalanceInput

@dynamic paymentCode;
@dynamic amount;
@dynamic token;
@dynamic platform;

typedef struct TopupBalanceInput__storage_ {
  uint32_t _has_storage_[1];
  NSString *paymentCode;
  NSString *token;
  NSString *platform;
  double amount;
} TopupBalanceInput__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "paymentCode",
        .dataTypeSpecific.className = NULL,
        .number = TopupBalanceInput_FieldNumber_PaymentCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TopupBalanceInput__storage_, paymentCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = TopupBalanceInput_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TopupBalanceInput__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = TopupBalanceInput_FieldNumber_Token,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TopupBalanceInput__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "platform",
        .dataTypeSpecific.className = NULL,
        .number = TopupBalanceInput_FieldNumber_Platform,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TopupBalanceInput__storage_, platform),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TopupBalanceInput class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TopupBalanceInput__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TopupBalanceResponse

@implementation TopupBalanceResponse

@dynamic error;

typedef struct TopupBalanceResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t error;
} TopupBalanceResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = NULL,
        .number = TopupBalanceResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TopupBalanceResponse__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TopupBalanceResponse class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TopupBalanceResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeviceInfo

@implementation DeviceInfo

@dynamic deviceToken;
@dynamic deviceType;

typedef struct DeviceInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *deviceToken;
  NSString *deviceType;
} DeviceInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "deviceToken",
        .dataTypeSpecific.className = NULL,
        .number = DeviceInfo_FieldNumber_DeviceToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeviceInfo__storage_, deviceToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.className = NULL,
        .number = DeviceInfo_FieldNumber_DeviceType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DeviceInfo__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeviceInfo class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeviceInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\013\000\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeviceBoolResponse

@implementation DeviceBoolResponse

@dynamic error;
@dynamic contentArray, contentArray_Count;

typedef struct DeviceBoolResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t error;
  GPBBoolArray *contentArray;
} DeviceBoolResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = NULL,
        .number = DeviceBoolResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeviceBoolResponse__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "contentArray",
        .dataTypeSpecific.className = NULL,
        .number = DeviceBoolResponse_FieldNumber_ContentArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DeviceBoolResponse__storage_, contentArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeviceBoolResponse class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeviceBoolResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserBalanceResponse

@implementation UserBalanceResponse

@dynamic callQuota;
@dynamic error;

typedef struct UserBalanceResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t error;
  double callQuota;
} UserBalanceResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "callQuota",
        .dataTypeSpecific.className = NULL,
        .number = UserBalanceResponse_FieldNumber_CallQuota,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserBalanceResponse__storage_, callQuota),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "error",
        .dataTypeSpecific.className = NULL,
        .number = UserBalanceResponse_FieldNumber_Error,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserBalanceResponse__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserBalanceResponse class]
                                     rootClass:[UserserviceRoot class]
                                          file:UserserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserBalanceResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
