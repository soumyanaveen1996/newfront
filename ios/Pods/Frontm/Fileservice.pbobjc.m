// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fileservice.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Fileservice.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - FileserviceRoot

@implementation FileserviceRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - FileserviceRoot_FileDescriptor

static GPBFileDescriptor *FileserviceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"file"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GetFileInput

@implementation GetFileInput

@dynamic folderName;
@dynamic fileName;
@dynamic base64;

typedef struct GetFileInput__storage_ {
  uint32_t _has_storage_[1];
  NSString *folderName;
  NSString *fileName;
} GetFileInput__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "folderName",
        .dataTypeSpecific.className = NULL,
        .number = GetFileInput_FieldNumber_FolderName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetFileInput__storage_, folderName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileName",
        .dataTypeSpecific.className = NULL,
        .number = GetFileInput_FieldNumber_FileName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetFileInput__storage_, fileName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "base64",
        .dataTypeSpecific.className = NULL,
        .number = GetFileInput_FieldNumber_Base64,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetFileInput class]
                                     rootClass:[FileserviceRoot class]
                                          file:FileserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetFileInput__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\n\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetFileResponse

@implementation GetFileResponse

@dynamic data_p;

typedef struct GetFileResponse__storage_ {
  uint32_t _has_storage_[1];
  NSData *data_p;
} GetFileResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = GetFileResponse_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetFileResponse__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetFileResponse class]
                                     rootClass:[FileserviceRoot class]
                                          file:FileserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetFileResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInformationResponse

@implementation GetInformationResponse

@dynamic lastModified;
@dynamic eTag;
@dynamic contentLength;
@dynamic contentType;
@dynamic acceptRanges;

typedef struct GetInformationResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t lastModified;
  int32_t contentLength;
  NSString *eTag;
  NSString *contentType;
  NSString *acceptRanges;
} GetInformationResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lastModified",
        .dataTypeSpecific.className = NULL,
        .number = GetInformationResponse_FieldNumber_LastModified,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInformationResponse__storage_, lastModified),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "eTag",
        .dataTypeSpecific.className = NULL,
        .number = GetInformationResponse_FieldNumber_ETag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInformationResponse__storage_, eTag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentLength",
        .dataTypeSpecific.className = NULL,
        .number = GetInformationResponse_FieldNumber_ContentLength,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetInformationResponse__storage_, contentLength),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "contentType",
        .dataTypeSpecific.className = NULL,
        .number = GetInformationResponse_FieldNumber_ContentType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetInformationResponse__storage_, contentType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "acceptRanges",
        .dataTypeSpecific.className = NULL,
        .number = GetInformationResponse_FieldNumber_AcceptRanges,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GetInformationResponse__storage_, acceptRanges),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInformationResponse class]
                                     rootClass:[FileserviceRoot class]
                                          file:FileserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInformationResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\014\000\002\004\000\003\r\000\004\013\000\005\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
