// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commonmessages.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Commonmessages.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CommonmessagesRoot

@implementation CommonmessagesRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - CommonmessagesRoot_FileDescriptor

static GPBFileDescriptor *CommonmessagesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"commonmessages"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Empty

@implementation Empty


typedef struct Empty__storage_ {
  uint32_t _has_storage_[1];
} Empty__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Empty class]
                                     rootClass:[CommonmessagesRoot class]
                                          file:CommonmessagesRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(Empty__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PhoneNumbers

@implementation PhoneNumbers

@dynamic satellite;
@dynamic land;
@dynamic mobile;

typedef struct PhoneNumbers__storage_ {
  uint32_t _has_storage_[1];
  NSString *satellite;
  NSString *land;
  NSString *mobile;
} PhoneNumbers__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "satellite",
        .dataTypeSpecific.className = NULL,
        .number = PhoneNumbers_FieldNumber_Satellite,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PhoneNumbers__storage_, satellite),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "land",
        .dataTypeSpecific.className = NULL,
        .number = PhoneNumbers_FieldNumber_Land,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PhoneNumbers__storage_, land),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mobile",
        .dataTypeSpecific.className = NULL,
        .number = PhoneNumbers_FieldNumber_Mobile,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PhoneNumbers__storage_, mobile),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PhoneNumbers class]
                                     rootClass:[CommonmessagesRoot class]
                                          file:CommonmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PhoneNumbers__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DomainRoles

@implementation DomainRoles

@dynamic domain;
@dynamic rolesArray, rolesArray_Count;

typedef struct DomainRoles__storage_ {
  uint32_t _has_storage_[1];
  NSString *domain;
  NSMutableArray *rolesArray;
} DomainRoles__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "domain",
        .dataTypeSpecific.className = NULL,
        .number = DomainRoles_FieldNumber_Domain,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DomainRoles__storage_, domain),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rolesArray",
        .dataTypeSpecific.className = NULL,
        .number = DomainRoles_FieldNumber_RolesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DomainRoles__storage_, rolesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DomainRoles class]
                                     rootClass:[CommonmessagesRoot class]
                                          file:CommonmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DomainRoles__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EmailAddresses

@implementation EmailAddresses

@dynamic home;
@dynamic work;

typedef struct EmailAddresses__storage_ {
  uint32_t _has_storage_[1];
  NSString *home;
  NSString *work;
} EmailAddresses__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "home",
        .dataTypeSpecific.className = NULL,
        .number = EmailAddresses_FieldNumber_Home,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EmailAddresses__storage_, home),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "work",
        .dataTypeSpecific.className = NULL,
        .number = EmailAddresses_FieldNumber_Work,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EmailAddresses__storage_, work),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EmailAddresses class]
                                     rootClass:[CommonmessagesRoot class]
                                          file:CommonmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EmailAddresses__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LocalContact

@implementation LocalContact

@dynamic userName;
@dynamic hasEmailAddresses, emailAddresses;
@dynamic hasPhoneNumbers, phoneNumbers;
@dynamic userId;

typedef struct LocalContact__storage_ {
  uint32_t _has_storage_[1];
  NSString *userName;
  EmailAddresses *emailAddresses;
  PhoneNumbers *phoneNumbers;
  NSString *userId;
} LocalContact__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = LocalContact_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LocalContact__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "emailAddresses",
        .dataTypeSpecific.className = GPBStringifySymbol(EmailAddresses),
        .number = LocalContact_FieldNumber_EmailAddresses,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LocalContact__storage_, emailAddresses),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "phoneNumbers",
        .dataTypeSpecific.className = GPBStringifySymbol(PhoneNumbers),
        .number = LocalContact_FieldNumber_PhoneNumbers,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LocalContact__storage_, phoneNumbers),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = LocalContact_FieldNumber_UserId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LocalContact__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LocalContact class]
                                     rootClass:[CommonmessagesRoot class]
                                          file:CommonmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LocalContact__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\010\000\002\016\000\003\014\000\004\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserAddress

@implementation UserAddress

@dynamic addressLine1;
@dynamic addressLine2;
@dynamic city;
@dynamic state;
@dynamic country;
@dynamic postCode;

typedef struct UserAddress__storage_ {
  uint32_t _has_storage_[1];
  NSString *addressLine1;
  NSString *addressLine2;
  NSString *city;
  NSString *state;
  NSString *country;
  NSString *postCode;
} UserAddress__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addressLine1",
        .dataTypeSpecific.className = NULL,
        .number = UserAddress_FieldNumber_AddressLine1,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserAddress__storage_, addressLine1),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addressLine2",
        .dataTypeSpecific.className = NULL,
        .number = UserAddress_FieldNumber_AddressLine2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserAddress__storage_, addressLine2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = UserAddress_FieldNumber_City,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserAddress__storage_, city),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "state",
        .dataTypeSpecific.className = NULL,
        .number = UserAddress_FieldNumber_State,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UserAddress__storage_, state),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "country",
        .dataTypeSpecific.className = NULL,
        .number = UserAddress_FieldNumber_Country,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UserAddress__storage_, country),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "postCode",
        .dataTypeSpecific.className = NULL,
        .number = UserAddress_FieldNumber_PostCode,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UserAddress__storage_, postCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserAddress class]
                                     rootClass:[CommonmessagesRoot class]
                                          file:CommonmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserAddress__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\014\000\002\014\000\006\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SelectedDomainInput

@implementation SelectedDomainInput

@dynamic selectedDomain;

typedef struct SelectedDomainInput__storage_ {
  uint32_t _has_storage_[1];
  NSString *selectedDomain;
} SelectedDomainInput__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "selectedDomain",
        .dataTypeSpecific.className = NULL,
        .number = SelectedDomainInput_FieldNumber_SelectedDomain,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SelectedDomainInput__storage_, selectedDomain),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SelectedDomainInput class]
                                     rootClass:[CommonmessagesRoot class]
                                          file:CommonmessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SelectedDomainInput__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
