// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: companyservice.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Companyservice.pbobjc.h"
#import "Commonmessages.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CompanyserviceRoot

@implementation CompanyserviceRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - CompanyserviceRoot_FileDescriptor

static GPBFileDescriptor *CompanyserviceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"company"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - CreateCompanyInput

@implementation CreateCompanyInput

@dynamic action;
@dynamic companyId;
@dynamic companyName;
@dynamic companyDescription;
@dynamic companyAddress;
@dynamic companyCountry;
@dynamic domainsArray, domainsArray_Count;

typedef struct CreateCompanyInput__storage_ {
  uint32_t _has_storage_[1];
  NSString *action;
  NSString *companyId;
  NSString *companyName;
  NSString *companyDescription;
  NSString *companyAddress;
  NSMutableArray *domainsArray;
  NSString *companyCountry;
} CreateCompanyInput__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "action",
        .dataTypeSpecific.className = NULL,
        .number = CreateCompanyInput_FieldNumber_Action,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateCompanyInput__storage_, action),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "companyId",
        .dataTypeSpecific.className = NULL,
        .number = CreateCompanyInput_FieldNumber_CompanyId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateCompanyInput__storage_, companyId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "companyName",
        .dataTypeSpecific.className = NULL,
        .number = CreateCompanyInput_FieldNumber_CompanyName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreateCompanyInput__storage_, companyName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "companyDescription",
        .dataTypeSpecific.className = NULL,
        .number = CreateCompanyInput_FieldNumber_CompanyDescription,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CreateCompanyInput__storage_, companyDescription),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "companyAddress",
        .dataTypeSpecific.className = NULL,
        .number = CreateCompanyInput_FieldNumber_CompanyAddress,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CreateCompanyInput__storage_, companyAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "domainsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DomainRoles),
        .number = CreateCompanyInput_FieldNumber_DomainsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CreateCompanyInput__storage_, domainsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "companyCountry",
        .dataTypeSpecific.className = NULL,
        .number = CreateCompanyInput_FieldNumber_CompanyCountry,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CreateCompanyInput__storage_, companyCountry),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateCompanyInput class]
                                     rootClass:[CompanyserviceRoot class]
                                          file:CompanyserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateCompanyInput__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\t\000\003\013\000\004\022\000\005\016\000\007\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateCompanyResponse

@implementation CreateCompanyResponse

@dynamic success;

typedef struct CreateCompanyResponse__storage_ {
  uint32_t _has_storage_[1];
} CreateCompanyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .dataTypeSpecific.className = NULL,
        .number = CreateCompanyResponse_FieldNumber_Success,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateCompanyResponse class]
                                     rootClass:[CompanyserviceRoot class]
                                          file:CompanyserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateCompanyResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
